package rules

import com.ftn.sbnz.model.models.Environment
import com.ftn.sbnz.model.models.VentilationStatus
import com.ftn.sbnz.model.models.AirFilter
import com.ftn.sbnz.model.models.Finding
import com.ftn.sbnz.service.services.FindingsService

global FindingsService findingsService

// DETECTION RULES
rule "Ventilation service required"
    agenda-group "detect.equipment"
when
    $env: Environment( co2Level > 1000, $moduleId : moduleID )
    eval(!findingsService.hasActiveFinding($moduleId, "Ventilation service required"))
    not Finding( type == "Ventilation service required", moduleId == $moduleId )
    VentilationStatus( moduleID == $moduleId, degraded == true )
then
    Finding finding = new Finding("Ventilation service required", $moduleId, 
        "Degraded ventilation with CO2 > 1000 ppm in module " + $moduleId, "HIGH");
    insert(finding);
end

rule "Air filter replacement required"
    agenda-group "detect.equipment"
when
    $env: Environment( co2Level > 1000, $moduleId : moduleID )
    // Check if this finding already exists in the global store for this specific module
    eval(!findingsService.hasActiveFinding($moduleId, "Air filter replacement required"))
    not Finding( type == "Air filter replacement required", moduleId == $moduleId )
    AirFilter( moduleID == $moduleId, dirty == true )
then
    Finding finding = new Finding("Air filter replacement required", $moduleId,
        "Dirty air filter with CO2 > 1000 ppm in module " + $moduleId, "MEDIUM");
    insert(finding);
end


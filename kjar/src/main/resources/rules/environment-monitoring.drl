package rules;

import com.ftn.sbnz.model.models.Environment;
import com.ftn.sbnz.model.models.CondensationData;
import com.ftn.sbnz.model.models.Finding;
import com.ftn.sbnz.model.enums.CondensationLocation;
import com.ftn.sbnz.model.events.HumidityEvent;
import com.ftn.sbnz.model.models.MoistureInvestigation;
import com.ftn.sbnz.model.models.WaterRecycling;
import com.ftn.sbnz.model.models.VentilationStatus;
import com.ftn.sbnz.model.enums.Module;
import com.ftn.sbnz.model.models.ModuleLink;

// CEP Rule: Sliding 6-hour window for humidity trend detection
rule "Condensation detection - 6 hour sliding humidity trend - update existing WALLS"
    agenda-group "cep.environment"
    salience 1200  // High priority - cep condensation first
when
    // Most recent humidity reading (within last 5 minutes)
    $recent: HumidityEvent($moduleId: moduleId, $recentHumidity: humidity)
    not HumidityEvent(moduleId == $moduleId, timestamp > $recent.timestamp)
    
    // Oldest humidity reading in the 6-hour window (5h55m to 6h5m ago)
    $oldest: HumidityEvent(
        moduleId == $moduleId,
        $oldestHumidity: humidity,
        this before[5h55m,6h5m] $recent  // 6-hour window with 5min tolerance
    )
    
    // Ensure this is the oldest in the window
    not HumidityEvent(
        moduleId == $moduleId,
        timestamp < $oldest.timestamp,
        this before[5h55m,6h5m] $recent
    )
    
    // Check for significant humidity increase (at least 10%)
    eval($recentHumidity > ($oldestHumidity + 10))
    
    // Current environment conditions - temperature close to dew point
    $env: Environment(
        moduleID == $moduleId,
        $dewPoint: dewPoint
    )
    
    // Existing WALLS condensation data to update
    $wallCondensation: CondensationData(
        moduleID == $moduleId, 
        location == CondensationLocation.WALLS,
        $surfaceTemp: surfaceTemperature,
        condensationActive == false,
        // Surface temperature is below dew point (condensation threshold)
        eval($surfaceTemp < $dewPoint)
    )
    
    // Check if condensation finding already exists for this module and location
    not Finding(type == "Condensation detected on WALLS", moduleId == $moduleId )
then
    // Create finding for this condensation detection
    Finding wallsFinding = new Finding("Condensation detected on WALLS", $moduleId, 
        "6-hour humidity increase from " + $oldestHumidity + "% to " + $recentHumidity + "% with surface temp " + $surfaceTemp + "°C below dew point " + $dewPoint + "°C", "HIGH");
    insert(wallsFinding);
end

// Alternative: Use collect for more robust window analysis
rule "Condensation detection - 6 hour collect pattern - update existing PANELS"
    agenda-group "cep.environment"
    salience 1200  // High priority - cep condensation first
when
    // Most recent humidity reading (within last 5 minutes)
    $recent: HumidityEvent($moduleId: moduleId, $recentHumidity: humidity)
    not HumidityEvent(moduleId == $moduleId, timestamp > $recent.timestamp)
    
    // Oldest humidity reading in the 6-hour window (5h55m to 6h5m ago)
    $oldest: HumidityEvent(
        moduleId == $moduleId,
        $oldestHumidity: humidity,
        this before[5h55m,6h5m] $recent  // 6-hour window with 5min tolerance
    )
    
    // Ensure this is the oldest in the window
    not HumidityEvent(
        moduleId == $moduleId,
        timestamp < $oldest.timestamp,
        this before[5h55m,6h5m] $recent
    )
    
    // Check for significant humidity increase (at least 10%)
    eval($recentHumidity > ($oldestHumidity + 10))
    
    // Environment and condensation conditions...
    $env: Environment(
        moduleID == $moduleId,
        $dewPoint: dewPoint
    )
    
    $panelCondensation: CondensationData(
        moduleID == $moduleId, 
        location == CondensationLocation.PANELS,
        $surfaceTemp: surfaceTemperature,
        condensationActive == false,
        // Surface temperature is below dew point (condensation threshold)
        eval($surfaceTemp < $dewPoint)
    )
    
    // Check if condensation finding already exists for this module and location
    not Finding(type == "Condensation detected on PANELS", moduleId == $moduleId )

    
then
    // Create finding for this condensation detection
    Finding panelsFinding = new Finding("Condensation detected on PANELS", $moduleId, 
        "6-hour humidity increase from " + $oldestHumidity + "% to " + $recentHumidity + "% with surface temp " + $surfaceTemp + "°C below dew point " + $dewPoint + "°C", "HIGH");
    insert(panelsFinding);
end

// Water lines condensation detection based on surface temperature vs dew point
rule "Condensation detection - Water lines temperature check"
    agenda-group "cep.environment"
    salience 1200  // High priority - cep condensation first
when
 $recent: HumidityEvent($moduleId: moduleId, $recentHumidity: humidity)
    not HumidityEvent(moduleId == $moduleId, timestamp > $recent.timestamp)
    
    $oldest: HumidityEvent(
        moduleId == $moduleId,
        $oldestHumidity: humidity,
        this before[5h55m,6h5m] $recent  
    )
    
    not HumidityEvent(
        moduleId == $moduleId,
        timestamp < $oldest.timestamp,
        this before[5h55m,6h5m] $recent
    )
    
    eval($recentHumidity > ($oldestHumidity + 10))

    // use existing humidity-derived $moduleId, don't re-bind it here
    $env: Environment(moduleID == $moduleId, $dewPoint: dewPoint)
    
    $waterCondensation: CondensationData(
        moduleID == $moduleId, 
        location == CondensationLocation.WATER_LINES,
        $surfaceTemp: surfaceTemperature,
        condensationActive == false,
        // Surface temperature is below dew point (condensation threshold)
        eval($surfaceTemp < $dewPoint)
    )
    
    // Check if condensation finding already exists for this module and location
    not Finding(type == "Condensation detected on WATER_LINES", moduleId == $moduleId )

then
    // Create finding for this condensation detection
    Finding waterlinesFinding = new Finding("Condensation detected on WATER_LINES", $moduleId, 
        "Surface temperature " + $surfaceTemp + "°C below dew point " + $dewPoint + "°C (difference: " + ($dewPoint - $surfaceTemp) + "°C)", "HIGH");
    insert(waterlinesFinding);
end

// Trigger moisture investigation when condensation is detected on critical surfaces
rule "Trigger moisture investigation"
    agenda-group "cep.environment"
    salience 500  // Lower priority - runs AFTER all condensation detection rules
when
        // Check for any condensation finding for this module
        $condensationFinding: Finding(
            type in ("Condensation detected on PANELS", "Condensation detected on WALLS", "Condensation detected on WATER_LINES"),
            $moduleId : moduleId
        )
        // Check if investigation finding already exists in working memory for this module
        not Finding(type == "Investigation Required")
    then
        // Create finding with proper moduleId support
        Finding finding = new Finding("Investigation Required", $moduleId, "Condensation detected", "HIGH");
        insert(finding);
    end


// Recursive query with visited list to avoid infinite module cycles.
// Call from Java with third parameter = null (visited list starts empty).
// Backward chaining query (Location-style) without explicit visited list.
// Traverses upstream via ModuleLink( from, to ) facts until a hypothesis base condition is satisfied.
// Seed ModuleLink graph in Java (e.g., CMD->LAB, LAB->COMM, COMM->CMD) so recursion reaches all modules.
query findMoistureSource( String hypothesis, String mod )
        (
            // H1 base: water recycling degraded + condensation + finding on WATER_LINES
            eval("H1".equals(hypothesis))
            and WaterRecycling( moduleID == mod, degraded == true )
            and CondensationData( moduleID == mod, location == CondensationLocation.WATER_LINES )
            and Finding( type == "Condensation detected on WATER_LINES", moduleId == mod )
        )
    or
        (
            // H2 base: ventilation degraded + walls condensation near dew point
            eval("H2".equals(hypothesis))
            and VentilationStatus( moduleID == mod, degraded == true )
            and Environment( moduleID == mod, $dewPoint : dewPoint )
            and CondensationData( moduleID == mod, location == CondensationLocation.WALLS, $surfaceTemp : surfaceTemperature )
            and Finding( type == "Condensation detected on WALLS", moduleId == mod )
            and eval($surfaceTemp <= ($dewPoint + 2.0))
        )
    or
        (
            // H3 base: cold panels vs ambient (thermal bridge)
            eval("H3".equals(hypothesis))
            and Environment( moduleID == mod, $ambient : temperature )
            and CondensationData( moduleID == mod, location == CondensationLocation.PANELS, $surfaceTemp2 : surfaceTemperature )
            and Finding( type == "Condensation detected on PANELS", moduleId == mod )
            and eval($surfaceTemp2 < ($ambient - 5.0))
        )
    or
        (
            ModuleLink( $prev, mod; )
            and findMoistureSource( hypothesis, $prev; )
        )
end
package environmentalmonitoring;

import com.ftn.sbnz.model.models.Environment;
import com.ftn.sbnz.model.models.CondensationData;
import com.ftn.sbnz.model.models.Finding;
import com.ftn.sbnz.model.enums.CondensationLocation;
import com.ftn.sbnz.model.events.HumidityEvent;

global com.ftn.sbnz.service.services.NotificationService notificationService;
global com.ftn.sbnz.service.services.InvestigationService investigationService;
global com.ftn.sbnz.service.services.FindingsService findingsService;

// Declare HumidityEvent as an event type for CEP
declare HumidityEvent
    @role( event )
    @timestamp( timestamp )
    @expires( 7h ) 
end

// CEP Rule: Sliding 6-hour window for humidity trend detection
rule "Condensation detection - 6 hour sliding humidity trend - update existing WALLS"
    salience 1200  // High priority - detect condensation first
when
    // Most recent humidity reading (within last 5 minutes)
    $recent: HumidityEvent($moduleId: moduleId, $recentHumidity: humidity)
    not HumidityEvent(moduleId == $moduleId, timestamp > $recent.timestamp)
    
    // Oldest humidity reading in the 6-hour window (5h55m to 6h5m ago)
    $oldest: HumidityEvent(
        moduleId == $moduleId,
        $oldestHumidity: humidity,
        this before[5h55m,6h5m] $recent  // 6-hour window with 5min tolerance
    )
    
    // Ensure this is the oldest in the window
    not HumidityEvent(
        moduleId == $moduleId,
        timestamp < $oldest.timestamp,
        this before[5h55m,6h5m] $recent
    )
    
    // Check for significant humidity increase (at least 10%)
    eval($recentHumidity > ($oldestHumidity + 10))
    
    // Current environment conditions - temperature close to dew point
    $env: Environment(
        moduleID == $moduleId,
        $dewPoint: dewPoint,
    )
    
    // Existing WALLS condensation data to update
    $wallCondensation: CondensationData(
        moduleID == $moduleId, 
        locationEnum == CondensationLocation.WALLS,
        $surfaceTemp: surfaceTemperature,
        condensationActive == false,
        // Surface temperature is below dew point (condensation threshold)
        eval($surfaceTemp < $dewPoint)
    )
    
    // Check if condensation finding already exists for this module and location
    eval(!findingsService.hasActiveFinding($moduleId, "Condensation detected on WALLS"))
    
then
    modify($wallCondensation) {
        setCondensationActive(true);
    }
    // Create finding for this condensation detection
    Finding wallsFinding = new Finding("Condensation detected on WALLS", $moduleId, 
        "6-hour humidity increase from " + $oldestHumidity + "% to " + $recentHumidity + "% with surface temp " + $surfaceTemp + "°C below dew point " + $dewPoint + "°C", "HIGH");
    insert(wallsFinding);
end

// Alternative: Use collect for more robust window analysis
rule "Condensation detection - 6 hour collect pattern - update existing PANELS"
    salience 1200  // High priority - detect condensation first
when
    // Most recent humidity reading (within last 5 minutes)
    $recent: HumidityEvent($moduleId: moduleId, $recentHumidity: humidity)
    not HumidityEvent(moduleId == $moduleId, timestamp > $recent.timestamp)
    
    // Oldest humidity reading in the 6-hour window (5h55m to 6h5m ago)
    $oldest: HumidityEvent(
        moduleId == $moduleId,
        $oldestHumidity: humidity,
        this before[5h55m,6h5m] $recent  // 6-hour window with 5min tolerance
    )
    
    // Ensure this is the oldest in the window
    not HumidityEvent(
        moduleId == $moduleId,
        timestamp < $oldest.timestamp,
        this before[5h55m,6h5m] $recent
    )
    
    // Check for significant humidity increase (at least 10%)
    eval($recentHumidity > ($oldestHumidity + 10))
    
    // Environment and condensation conditions...
    $env: Environment(
        moduleID == $moduleId,
        $dewPoint: dewPoint
    )
    
    $panelCondensation: CondensationData(
        moduleID == $moduleId, 
        locationEnum == CondensationLocation.PANELS,
        $surfaceTemp: surfaceTemperature,
        condensationActive == false,
        // Surface temperature is below dew point (condensation threshold)
        eval($surfaceTemp < $dewPoint)
    )
    
    // Check if condensation finding already exists for this module and location
    eval(!findingsService.hasActiveFinding($moduleId, "Condensation detected on PANELS"))
    
then
    modify($panelCondensation) {
        setCondensationActive(true);
    }
    // Create finding for this condensation detection
    Finding panelsFinding = new Finding("Condensation detected on PANELS", $moduleId, 
        "6-hour humidity increase from " + $oldestHumidity + "% to " + $recentHumidity + "% with surface temp " + $surfaceTemp + "°C below dew point " + $dewPoint + "°C", "HIGH");
    insert(panelsFinding);
end

// Water lines condensation detection based on surface temperature vs dew point
rule "Condensation detection - Water lines temperature check"
    salience 1200  // High priority - detect condensation first
when
 $recent: HumidityEvent($moduleId: moduleId, $recentHumidity: humidity)
    not HumidityEvent(moduleId == $moduleId, timestamp > $recent.timestamp)
    
    $oldest: HumidityEvent(
        moduleId == $moduleId,
        $oldestHumidity: humidity,
        this before[5h55m,6h5m] $recent  // 6-hour window with 5min tolerance
    )
    
    not HumidityEvent(
        moduleId == $moduleId,
        timestamp < $oldest.timestamp,
        this before[5h55m,6h5m] $recent
    )
    
    eval($recentHumidity > ($oldestHumidity + 10))

    $env: Environment(
        $moduleId: moduleID,
        $dewPoint: dewPoint
    )
    
    $waterCondensation: CondensationData(
        moduleID == $moduleId, 
        locationEnum == CondensationLocation.WATER_LINES,
        $surfaceTemp: surfaceTemperature,
        condensationActive == false,
        // Surface temperature is below dew point (condensation threshold)
        eval($surfaceTemp < $dewPoint)
    )
    
    // Check if condensation finding already exists for this module and location
    eval(!findingsService.hasActiveFinding($moduleId, "Condensation detected on WATER_LINES"))
    
then
    modify($waterCondensation) {
        setCondensationActive(true);
    }
    // Create finding for this condensation detection
    Finding waterlinesFinding = new Finding("Condensation detected on WATER_LINES", $moduleId, 
        "Surface temperature " + $surfaceTemp + "°C below dew point " + $dewPoint + "°C (difference: " + ($dewPoint - $surfaceTemp) + "°C)", "HIGH");
    insert(waterlinesFinding);
end

// Trigger moisture investigation when condensation is detected on critical surfaces
rule "Trigger Moisture Investigation - Condensation Detected"
    salience 500  // Lower priority - runs AFTER all condensation detection rules
    when
        // Check for active condensation on critical surfaces
        CondensationData(
            condensationActive == true,
            (locationEnum == CondensationLocation.PANELS || 
             locationEnum == CondensationLocation.WALLS || 
             locationEnum == CondensationLocation.WATER_LINES),
            $moduleId : moduleID
        )
        // Check if finding already exists in global store for this module
        eval(!findingsService.hasActiveFinding($moduleId, "Investigation Required"))
    then
        // Create finding with proper moduleId support
        Finding finding = new Finding("Investigation Required", $moduleId, "Condensation detected", "HIGH");
        insert(finding);
    end

// Send notification for new findings
rule "Send notification for new findings"
    salience 400
when
    $finding : Finding( notified == false )
then
    notificationService.sendNotification($finding.getType(), "ENVIRONMENTAL_MONITORING", 
        $finding.getDetails(), $finding.getPriority());
    modify($finding) { setNotified(true) }
end

// Persist findings to global store
rule "Persist findings to global store"
    salience 300
when
    $finding : Finding( notified == true, $moduleId : moduleId )
then
    findingsService.addFindings($moduleId, java.util.Arrays.asList($finding));
end
package environmentalmonitoring;

import com.ftn.sbnz.model.models.Environment;
import com.ftn.sbnz.model.models.CondensationData;
import com.ftn.sbnz.model.models.Finding;
import com.ftn.sbnz.model.enums.CondensationLocation;
import com.ftn.sbnz.model.events.HumidityEvent;
import com.ftn.sbnz.model.models.MoistureInvestigation;
import com.ftn.sbnz.model.models.WaterRecycling;
import com.ftn.sbnz.model.models.VentilationStatus;
import com.ftn.sbnz.model.enums.Module;

// CEP Rule: Sliding 6-hour window for humidity trend detection
rule "Condensation detection - 6 hour sliding humidity trend - update existing WALLS"
    agenda-group "cep.environment"
    salience 1200  // High priority - cep condensation first
when
    // Most recent humidity reading (within last 5 minutes)
    $recent: HumidityEvent($moduleId: moduleId, $recentHumidity: humidity)
    not HumidityEvent(moduleId == $moduleId, timestamp > $recent.timestamp)
    
    // Oldest humidity reading in the 6-hour window (5h55m to 6h5m ago)
    $oldest: HumidityEvent(
        moduleId == $moduleId,
        $oldestHumidity: humidity,
        this before[5h55m,6h5m] $recent  // 6-hour window with 5min tolerance
    )
    
    // Ensure this is the oldest in the window
    not HumidityEvent(
        moduleId == $moduleId,
        timestamp < $oldest.timestamp,
        this before[5h55m,6h5m] $recent
    )
    
    // Check for significant humidity increase (at least 10%)
    eval($recentHumidity > ($oldestHumidity + 10))
    
    // Current environment conditions - temperature close to dew point
    $env: Environment(
        moduleID == $moduleId,
        $dewPoint: dewPoint
    )
    
    // Existing WALLS condensation data to update
    $wallCondensation: CondensationData(
        moduleID == $moduleId, 
        location == CondensationLocation.WALLS,
        $surfaceTemp: surfaceTemperature,
        condensationActive == false,
        // Surface temperature is below dew point (condensation threshold)
        eval($surfaceTemp < $dewPoint)
    )
    
    // Check if condensation finding already exists for this module and location
    not Finding(type == "Condensation detected on WALLS", moduleId == $moduleId )
then
    // Create finding for this condensation detection
    Finding wallsFinding = new Finding("Condensation detected on WALLS", $moduleId, 
        "6-hour humidity increase from " + $oldestHumidity + "% to " + $recentHumidity + "% with surface temp " + $surfaceTemp + "°C below dew point " + $dewPoint + "°C", "HIGH");
    insert(wallsFinding);
end

// Alternative: Use collect for more robust window analysis
rule "Condensation detection - 6 hour collect pattern - update existing PANELS"
    agenda-group "cep.environment"
    salience 1200  // High priority - cep condensation first
when
    // Most recent humidity reading (within last 5 minutes)
    $recent: HumidityEvent($moduleId: moduleId, $recentHumidity: humidity)
    not HumidityEvent(moduleId == $moduleId, timestamp > $recent.timestamp)
    
    // Oldest humidity reading in the 6-hour window (5h55m to 6h5m ago)
    $oldest: HumidityEvent(
        moduleId == $moduleId,
        $oldestHumidity: humidity,
        this before[5h55m,6h5m] $recent  // 6-hour window with 5min tolerance
    )
    
    // Ensure this is the oldest in the window
    not HumidityEvent(
        moduleId == $moduleId,
        timestamp < $oldest.timestamp,
        this before[5h55m,6h5m] $recent
    )
    
    // Check for significant humidity increase (at least 10%)
    eval($recentHumidity > ($oldestHumidity + 10))
    
    // Environment and condensation conditions...
    $env: Environment(
        moduleID == $moduleId,
        $dewPoint: dewPoint
    )
    
    $panelCondensation: CondensationData(
        moduleID == $moduleId, 
        location == CondensationLocation.PANELS,
        $surfaceTemp: surfaceTemperature,
        condensationActive == false,
        // Surface temperature is below dew point (condensation threshold)
        eval($surfaceTemp < $dewPoint)
    )
    
    // Check if condensation finding already exists for this module and location
    not Finding(type == "Condensation detected on PANELS", moduleId == $moduleId )

    
then
    // Create finding for this condensation detection
    Finding panelsFinding = new Finding("Condensation detected on PANELS", $moduleId, 
        "6-hour humidity increase from " + $oldestHumidity + "% to " + $recentHumidity + "% with surface temp " + $surfaceTemp + "°C below dew point " + $dewPoint + "°C", "HIGH");
    insert(panelsFinding);
end

// Water lines condensation detection based on surface temperature vs dew point
rule "Condensation detection - Water lines temperature check"
    agenda-group "cep.environment"
    salience 1200  // High priority - cep condensation first
when
 $recent: HumidityEvent($moduleId: moduleId, $recentHumidity: humidity)
    not HumidityEvent(moduleId == $moduleId, timestamp > $recent.timestamp)
    
    $oldest: HumidityEvent(
        moduleId == $moduleId,
        $oldestHumidity: humidity,
        this before[5h55m,6h5m] $recent  
    )
    
    not HumidityEvent(
        moduleId == $moduleId,
        timestamp < $oldest.timestamp,
        this before[5h55m,6h5m] $recent
    )
    
    eval($recentHumidity > ($oldestHumidity + 10))

    // use existing humidity-derived $moduleId, don't re-bind it here
    $env: Environment(moduleID == $moduleId, $dewPoint: dewPoint)
    
    $waterCondensation: CondensationData(
        moduleID == $moduleId, 
        location == CondensationLocation.WATER_LINES,
        $surfaceTemp: surfaceTemperature,
        condensationActive == false,
        // Surface temperature is below dew point (condensation threshold)
        eval($surfaceTemp < $dewPoint)
    )
    
    // Check if condensation finding already exists for this module and location
    not Finding(type == "Condensation detected on WATER_LINES", moduleId == $moduleId )

then
    // Create finding for this condensation detection
    Finding waterlinesFinding = new Finding("Condensation detected on WATER_LINES", $moduleId, 
        "Surface temperature " + $surfaceTemp + "°C below dew point " + $dewPoint + "°C (difference: " + ($dewPoint - $surfaceTemp) + "°C)", "HIGH");
    insert(waterlinesFinding);
end

// Trigger moisture investigation when condensation is detected on critical surfaces
rule "Trigger moisture investigation"
    agenda-group "cep.environment"
    salience 500  // Lower priority - runs AFTER all condensation detection rules
when
        // Check for any condensation finding for this module
        $condensationFinding: Finding(
            type in ("Condensation detected on PANELS", "Condensation detected on WALLS", "Condensation detected on WATER_LINES"),
            $moduleId : moduleId
        )
        // Check if investigation finding already exists in working memory for this module
        not Finding(type == "Investigation Required")
    then
        // Create finding with proper moduleId support
        Finding finding = new Finding("Investigation Required", $moduleId, "Condensation detected", "HIGH");
        insert(finding);
    end


query isMoistureSourceIn(String moduleId, String hypothesis)
    (
        // H1: Water recycling degraded + condensation on water lines
        eval("H1".equals(hypothesis))
        and WaterRecycling( wrModule : moduleID, degraded == true )
        and CondensationData( cdModule : moduleID, location == CondensationLocation.WATER_LINES )
        and Finding( type == "Condensation detected on WATER_LINES", moduleId == moduleId )
        and eval(wrModule.equals(moduleId) && cdModule.equals(moduleId))
    )
    or
    (
        // H2: Ventilation degraded + condensation near dew point on walls
        eval("H2".equals(hypothesis))
        and VentilationStatus( vsModule : moduleID, degraded == true )
        and Environment( envModule : moduleID, dewPoint : dewPoint )
        and CondensationData( cdModule2 : moduleID, location == CondensationLocation.WALLS, surfaceTemp : surfaceTemperature )
        and Finding( type == "Condensation detected on WALLS", moduleId == moduleId )
        and eval(vsModule.equals(moduleId) && envModule.equals(moduleId) && cdModule2.equals(moduleId) && surfaceTemp <= (dewPoint + 2.0))
    )
    or
    (
        // H3: Thermal bridge (cold panels)
        eval("H3".equals(hypothesis))
        and Environment( ambModule : moduleID, ambient : temperature )
        and CondensationData( cdModule3 : moduleID, location == CondensationLocation.PANELS, surfaceTemp2 : surfaceTemperature )
        and Finding( type == "Condensation detected on PANELS", moduleId == moduleId )
        and eval(ambModule.equals(moduleId) && cdModule3.equals(moduleId) && surfaceTemp2 < (ambient - 5.0))
    )
    // recursion removed: investigation logic advances modules instead
end

// Investigation agenda for moisture sources
// Rules below run when Java focuses the "investigate.moisture" agenda-group.

rule "Investigate H1 - Water recycling"
    agenda-group "investigate.moisture"
    salience 300
when
    $mi : MoistureInvestigation( $mod : currentModuleID, investigationComplete == false, sourceFound == false )
    isMoistureSourceIn( moduleId: $mod, hypothesis: "H1" )
then
    $mi.addTestedModule($mod);
    $mi.setSourceFound(true);
    $mi.setConfirmedHypothesis("H1");
    $mi.setResult("Water recycling degraded in module " + $mod);
    $mi.setInvestigationComplete(true);
    update($mi);
    Finding f = new Finding("Moisture source identified", $mod, "H1 matched: Water recycling degraded", "HIGH");
    insert(f);
end

rule "Investigate H2 - Ventilation"
    agenda-group "investigate.moisture"
    salience 200
when
    $mi : MoistureInvestigation( $mod : currentModuleID, investigationComplete == false, sourceFound == false )
    isMoistureSourceIn( moduleId: $mod, hypothesis: "H2" )
then
    $mi.addTestedModule($mod);
    $mi.setSourceFound(true);
    $mi.setConfirmedHypothesis("H2");
    $mi.setResult("Ventilation degraded near dew point in module " + $mod);
    $mi.setInvestigationComplete(true);
    update($mi);
    Finding f = new Finding("Moisture source identified", $mod, "H2 matched: Ventilation degraded", "HIGH");
    insert(f);
end

rule "Investigate H3 - Thermal bridge"
    agenda-group "investigate.moisture"
    salience 100
when
    $mi : MoistureInvestigation( $mod : currentModuleID, investigationComplete == false, sourceFound == false )
    isMoistureSourceIn( moduleId: $mod, hypothesis: "H3" )
    not Finding( type == "Moisture source identified", moduleId == $mod )
then
    $mi.addTestedModule($mod);
    $mi.setSourceFound(true);
    $mi.setConfirmedHypothesis("H3");
    $mi.setResult("Thermal bridge / cold panels in module " + $mod);
    $mi.setInvestigationComplete(true);
    update($mi);
    Finding f = new Finding("Moisture source identified", $mod, "H3 matched: Thermal bridge", "HIGH");
    insert(f);
end

// If none of the hypotheses matched for the current module, advance to the next untested module
rule "Advance investigation to next module"
    agenda-group "investigate.moisture"
    salience 50
when
    $mi : MoistureInvestigation( $mod : currentModuleID, investigationComplete == false, sourceFound == false, $testedModules : testedModules )
    $next : String() from Module.getNextModuleId($mod, $testedModules)
then
    // mark current as tested and move to next
    $mi.addTestedModule($mod);
    $mi.setCurrentModuleID($next);
    update($mi);
end

// If there is no next module to try, complete the investigation as not found
rule "Investigation complete - no source found"
    agenda-group "investigate.moisture"
    salience 10
when
    $mi : MoistureInvestigation( $mod : currentModuleID, investigationComplete == false, sourceFound == false, $testedModules : testedModules )
    eval(Module.getNextModuleId($mod, $testedModules) == null)
then
    $mi.addTestedModule($mod);
    $mi.setInvestigationComplete(true);
    $mi.setSourceFound(false);
    $mi.setResult("No moisture source found after scanning all modules");
    $mi.setCompletionTimestamp(System.currentTimeMillis());
    update($mi);
    Finding f = new Finding("Investigation complete - no source", $mi.getCurrentModuleID(), "No source found after scanning all modules", "LOW");
    insert(f);
end
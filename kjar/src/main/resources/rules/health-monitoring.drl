package rules

import com.ftn.sbnz.model.models.Environment
import com.ftn.sbnz.model.models.Vitals
import com.ftn.sbnz.model.models.CrewSymptoms
import com.ftn.sbnz.model.models.VentilationStatus
import com.ftn.sbnz.model.models.Finding
import com.ftn.sbnz.service.services.FindingsService

global FindingsService findingsService

// HYPOXIA DETECTION RULES (detect.health)
rule "Risk of hypoxia - detect"
    agenda-group "detect.health"
when
    // bind module from provided Environment fact
    $env: Environment( o2Level < 19.5 || co2Level > 1000, $moduleId : moduleID )
    eval(!findingsService.hasActiveFinding($moduleId, "Risk of hypoxia"))
    not Finding( type == "Risk of hypoxia", moduleId == $moduleId )
then
    Finding finding = new Finding("Risk of hypoxia", $moduleId, 
        "Environmental risk detected in module " + $moduleId, "HIGH");
    insert(finding);
end

// CHEMICAL AIR QUALITY DETECTIONS
rule "Chemical irritants present - detect"
    agenda-group "detect.health"
when
    // bind module from provided Environment fact
    $env: Environment( coLevel > 35, $moduleId : moduleID )
    eval(!findingsService.hasActiveFinding($moduleId, "Chemical irritants present"))
    not Finding( type == "Chemical irritants present", moduleId == $moduleId )
    // CrewSymptoms has no moduleID; correlate via crew health facts in application if needed
    CrewSymptoms( eyeIrritation == true )
then
    Finding finding = new Finding("Chemical irritants present", $moduleId,
        "Chemical irritants detected in module " + $moduleId, "MEDIUM");
    insert(finding);
end

// DIAGNOSIS RULES (diagnose.health)
rule "Hypoxia confirmed - diagnose"
    agenda-group "diagnose.health"
when
    // bind module from provided Environment fact
    $env: Environment( $moduleId : moduleID )
    eval(!findingsService.hasActiveFinding($moduleId, "Hypoxia confirmed"))
    not Finding( type == "Hypoxia confirmed", moduleId == $moduleId )
    Finding( type == "Risk of hypoxia", moduleId == $moduleId )
    and (
        Vitals( spo2 < 90 )
        or CrewSymptoms( shortnessOfBreath == true )
        or CrewSymptoms( dizziness == true )
    )
then
    Finding finding = new Finding("Hypoxia confirmed", $moduleId,
        "Hypoxia confirmed with symptoms in module " + $moduleId, "CRITICAL");
    insert(finding);
end

rule "Cause of hypoxia: ventilation degraded - diagnose"
    agenda-group "diagnose.health"
when
    // bind module from provided Environment fact
    $env: Environment( $moduleId : moduleID )
    eval(!findingsService.hasActiveFinding($moduleId, "Cause of hypoxia: poor ventilation"))
    not Finding( type == "Cause of hypoxia: poor ventilation", moduleId == $moduleId )
    Finding( type == "Hypoxia confirmed", moduleId == $moduleId )
    VentilationStatus( moduleID == $moduleId, degraded == true )
then
    Finding finding = new Finding("Cause of hypoxia: poor ventilation", $moduleId,
        "Poor ventilation causing hypoxia in module " + $moduleId, "HIGH");
    insert(finding);
end

rule "Dangerous air quality in module - diagnose"
    agenda-group "diagnose.health"
when
    // bind module from provided Environment fact
    $env: Environment( $moduleId : moduleID )
    eval(!findingsService.hasActiveFinding($moduleId, "Dangerous air quality in module"))
    not Finding( type == "Dangerous air quality in module", moduleId == $moduleId )
    Finding( type == "Chemical irritants present", moduleId == $moduleId )
    VentilationStatus( moduleID == $moduleId, degraded == true )
then
    Finding finding = new Finding("Dangerous air quality in module", $moduleId,
        "Dangerous air quality detected in module " + $moduleId, "HIGH");
    insert(finding);
end
